import java.io.*; 
import javax.crypto.*; 
import javax.crypto.spec.*; 
import java.security.Key; 
import java.util.Base64; 
public class BlowFish { 
public static void main(String[] args) throws Exception { 
// Generate the secret key for Blowfish 
KeyGenerator keyGenerator = KeyGenerator.getInstance("Blowfish"); 
keyGenerator.init(128); // Blowfish key size (128 bits) 
Key secretKey = keyGenerator.generateKey(); 
// Create the cipher for Blowfish in CFB mode with NoPadding 
Cipher cipherOut = Cipher.getInstance("Blowfish/CFB/NoPadding"); 
// Initialize cipher for encryption 
cipherOut.init(Cipher.ENCRYPT_MODE, secretKey); 
// Create CipherOutputStream to encrypt while writing to the file 
CipherOutputStream cout = new CipherOutputStream(fout, cipherOut); 
// Get the initialization vector (IV) 
byte[] iv = cipherOut.getIV(); 
if (iv != null) { 
System.out.println("Initialization Vector of the Cipher: " + 
Base64.getEncoder().encodeToString(iv)); 
} 
// Create file input/output streams 
FileInputStream fin = new FileInputStream("inputFile.txt"); 
FileOutputStream fout = new FileOutputStream("outputFile.txt");
 int input; 
        // Read bytes from input file and write to encrypted output file 
        while ((input = fin.read()) != -1) { 
            cout.write(input); 
        } 
 
        // Close all streams 
        fin.close(); 
        cout.close(); 
        fout.close(); 
    } 
}
