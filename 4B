import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load dataset (Ensure 'customer_data.csv' exists with 'Age', 'Income', 'Purchased' columns)
data = pd.read_csv('customer_data.csv')

# Selecting features (Age and Income) and target variable (Purchased)
x = data[['Age', 'Income']]
y = data['Purchased']

# Splitting data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Creating and training the Logistic Regression model
model = LogisticRegression()
model.fit(x_train, y_train)

# User input for prediction
user_age = int(input("Enter Age: "))
user_income = float(input("Enter Income: "))
predicted_class = model.predict([[user_age, user_income]])

print(f"Prediction: {'Purchased' if predicted_class[0] == 1 else 'Not Purchased'}")

# Model evaluation
y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Plotting decision boundary
plt.scatter(data['Age'], data['Income'], c=data['Purchased'], cmap='bwr', alpha=0.7)
plt.xlabel('Age')
plt.ylabel('Income')
plt.title('Logistic Regression - Purchase Prediction')
plt.colorbar(label='Purchased (0: No, 1: Yes)')
plt.show()
